generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResourceType {
  USER
  ROLE
  PERMISSION
  CATEGORY
  ARTICLE
}

enum CategoryType {
  ARTICLE
  PRODUCT
  INDUSTRY
  APPLICATION
}

enum PartnerType {
  MANUFACTURER
  SUPPLIER
}

enum ActionType {
  READ
  WRITE
  DELETE
  UPDATE
  ALL
}

enum ScopeType {
  SELF
  GLOBAL
}

enum UserActiveStatus {
  INACTIVE
  ACTIVE
  BANNED
  FRAUD
  NOT_VERIFIED
}

enum PermissionType {
  GLOBAL
  PARTNER
  CUSTOMER
}

enum ContentType {
  MD
  MDX
  HTML
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

model SystemSettings {
  id String @id @default(uuid())

  siteOn          Boolean @default(false)
  defaultLanguage String  @default("en")
  timezone        String  @default("UTC")
  siteName        String  @default("yagVeYag")
  contactEmail    String?

  allowRegistration Boolean @default(true)
  maintenanceMode   Boolean @default(false)

  defaultMetaTitle       String?
  defaultMetaDescription String?
  defaultMetaKeywords    String[]

  smtpHost     String?
  smtpPort     Int?
  smtpUsername String?
  smtpPassword String?

  maxFileUploadSize Int      @default(10485760) // 10 MB
  allowedFileTypes  String[] @default(["jpg", "png", "pdf"])

  maxLoginAttempts  Int @default(5)
  passwordMinLength Int @default(8)

  googleAnalyticsKey String?
  stripeApiKey       String?

  facebookUrl String?
  twitterUrl  String?
  linkedinUrl String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Asset {
  id              String    @id @default(uuid())
  originalName    String
  name            String
  type            AssetType
  mimeType        String
  fileSize        Int
  source          String
  preview         String?
  storageProvider String?

  width      Int?  @default(0)
  height     Int?  @default(0)
  focalPoint Json?

  channels                     Channel[]        @relation("ChannelAssets")
  productFeaturedImages        Product[]        @relation("ProductFeaturedImage")
  productVariantFeaturedImages ProductVariant[] @relation("ProductFeaturedImage")
  productAssets                Product[]        @relation("ProductAssets")
  productVariantImages         ProductVariant[] @relation("VariantImages")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  updatedBy String?
  createdBy String?
  deletedAt DateTime?
  deletedBy String?
}

model Product {
  id              String  @id @default(uuid())
  featuredAssetId String?
  draft           Boolean @default(true)

  name        String
  slug        String?
  description String?

  featuredAsset      Asset?              @relation(name: "ProductFeaturedImage", fields: [featuredAssetId], references: [id])
  assets             Asset[]             @relation("ProductAssets")
  channels           Channel[]           @relation("ChannelProducts")
  facetValues        FacetValue[]        @relation("ProductFacetValues")
  variants           ProductVariant[]
  productCollections ProductCollection[] @relation("CollectionProducts")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  updatedBy String?
  createdBy String?
  deletedAt DateTime?
  deletedBy String?
}

model ProductCollection {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String? @unique
  description String?

  isDynamic Boolean @default(false)

  products Product[] @relation("CollectionProducts")

  rules Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?
}

model ProductVariant {
  id              String  @id @default(uuid())
  productId       String
  taxRateId       String?
  featuredAssetId String?

  name             String
  price            Float?
  sku              String? @unique
  priceIncludesTax Boolean @default(false)
  currencyCode     String
  stockThreshold   Int     @default(0)
  trackInventory   Boolean @default(true)
  isEnabled        Boolean @default(true)

  taxRate       TaxRate?        @relation(fields: [taxRateId], references: [id])
  product       Product         @relation(fields: [productId], references: [id])
  featuredAsset Asset?          @relation(name: "ProductFeaturedImage", fields: [featuredAssetId], references: [id])
  images        Asset[]         @relation("VariantImages")
  stock         StockLevel[]
  options       ProductOption[] @relation("VariantOptions")
  facetValues   FacetValue[]    @relation("VariantFacets")
  channels      Channel[]       @relation("ChannelVariants")
  collections   Collection[]    @relation("VariantCollections")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  updatedBy String?
  createdBy String?
  deletedAt DateTime?
  deletedBy String?
}

model TaxRate {
  id String @id @default(uuid())

  productVariants ProductVariant[]

  name      String
  rate      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockLevel {
  id        String @id @default(uuid())
  variantId String

  location String
  quantity Int

  variant ProductVariant @relation(fields: [variantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id       String           @id @default(uuid())
  name     String
  variants ProductVariant[] @relation("VariantCollections")
}

model ProductOption {
  id       String           @id @default(uuid())
  name     String
  values   String[]
  variants ProductVariant[] @relation("VariantOptions") // Variants using this option
}

model Price {
  id        String @id @default(uuid())
  productId String

  type         String
  value        Float
  currencyCode String  @default("USD")
  isActive     Boolean @default(true)

  startDate DateTime?
  endDate   DateTime?

  channels Channel[] @relation("ChannelPrices")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  updatedBy String?
  createdBy String?
  deletedAt DateTime?
  deletedBy String?
}

model User {
  id              String  @id @default(uuid())
  roleId          String
  oauthProviderId String?

  email                  String  @unique
  passwordHash           String
  emailVerificationToken String?
  resetPasswordToken     String?
  oauthProvider          String?
  twoFactorSecret        String?

  permissions String[]

  twoFactorEnabled Boolean @default(false)
  emailVerified    Boolean @default(false)

  isActive UserActiveStatus @default(INACTIVE)

  role          Role           @relation(fields: [roleId], references: [id])
  administrator Administrator?

  resetPasswordExpires DateTime?
  lastLogin            DateTime?
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  updatedBy            String?
  createdBy            String?
  deletedAt            DateTime?
  deletedBy            String?

  @@index([email])
  @@index([roleId])
}

model Administrator {
  id     String @id @default(uuid())
  userId String @unique

  email String @unique

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?
}

model Role {
  id String @id @default(uuid())

  name String @unique

  users           User[]
  rolePermissions RolePermission[]
  channels        Channel[]        @relation("ChannelRoles")

  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?
}

model Permission {
  id              String  @id @default(uuid())
  specificScopeId String?

  resource       ResourceType
  action         ActionType
  scope          ScopeType
  permissionType PermissionType @default(value: GLOBAL)

  rolePermissions RolePermission[]
  channels        Channel[]        @relation("ChannelPermissions")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  @@unique([action, resource, scope])
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  isActive Boolean @default(true)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  channels   Channel[]  @relation("ChannelRolePermission")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  @@unique([roleId, permissionId])
}

model Partner {
  id        String @id @default(uuid())
  channelId String

  name        String
  email       String?
  phoneNumber String?
  address     String?
  partnerType PartnerType
  website     String?

  channel Channel @relation(fields: [channelId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  createdBy String?
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  @@index([partnerType])
}

model Category {
  id               String  @id @default(uuid())
  parentCategoryId String?
  seoMetadataId    String?

  name         String
  content      String
  contentType  ContentType
  categoryType CategoryType

  parentCategory Category?    @relation(fields: [parentCategoryId], references: [id], name: "categoryTree")
  subCategories  Category[]   @relation(name: "categoryTree")
  seoMetadata    SeoMetadata? @relation(fields: [seoMetadataId], references: [id])
  channels       Channel[]    @relation("ChannelCategories")

  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  @@unique([name, categoryType])
  @@index([seoMetadataId])
}

model Article {
  id            String  @id @default(uuid())
  seoMetadataId String?

  title       String
  content     String
  contentType ContentType

  seoMetadata SeoMetadata? @relation(fields: [seoMetadataId], references: [id])
  channels    Channel[]    @relation("ChannelArticles")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([seoMetadataId])
}

model SeoMetadata {
  id String @id @default(uuid())

  title       String
  description String
  keywords    String
  version     Int    @default(1)

  canonicalUrl  String?
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  robots        String?
  schemaMarkup  Json?
  hreflang      String?
  pageType      String?

  categories Category[]
  blogPosts  Article[]
  channels   Channel[]  @relation("ChannelMetaFields")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("MetaField")
}

model Lang {
  id String @id @default(uuid())

  name      String @unique
  code      String @unique
  direction String @default("ltr")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Facet {
  id String @id @default(uuid())

  name      String
  code      String
  isPrivate Boolean @default(false)

  values   FacetValue[]
  channels Channel[]    @relation("ChannelFacets")

  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?
}

model FacetValue {
  id      String @id @default(uuid())
  facetId String

  name String
  code String

  facet           Facet            @relation(fields: [facetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channels        Channel[]        @relation("ChannelFacetValues")
  products        Product[]        @relation("ProductFacetValues")
  productVariants ProductVariant[] @relation("VariantFacets")

  createdAt DateTime? @default(now())
  createdBy String?
  updatedAt DateTime? @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  @@unique([facetId, name])
  @@unique([facetId, code])
}

model Channel {
  id String @id @default(uuid())

  code                String  @unique
  name                String
  defaultLanguageCode String
  currencyCode        String
  isDefault           Boolean @default(false)

  partners        Partner[]
  roles           Role[]           @relation("ChannelRoles")
  permissions     Permission[]     @relation("ChannelPermissions")
  rolePermissions RolePermission[] @relation("ChannelRolePermission")
  categories      Category[]       @relation("ChannelCategories")
  articles        Article[]        @relation("ChannelArticles")
  metaFields      SeoMetadata[]    @relation("ChannelMetaFields")
  facets          Facet[]          @relation("ChannelFacets")
  facetValues     FacetValue[]     @relation("ChannelFacetValues")
  assets          Asset[]          @relation("ChannelAssets")
  products        Product[]        @relation("ChannelProducts")
  variants        ProductVariant[] @relation("ChannelVariants")
  prices          Price[]          @relation("ChannelPrices")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?
}
